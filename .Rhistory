1+1
1[1]
1+1
2+2
sqrt(10)#one more feature
x <- c(2,3,4,2,7,1)#simple vector
x
x[1]
x[0]
x[2]
y
y
y <- c("Cunberra", "Sydney", "Newcastle", "Darwin") #vector with string type elements
y
?class
x_join
x_join
x_join
x1 <- c(2,3,5,2,7,1)
x2 <- c(0,0,0)
x_join <- c(x1,x1)
x_join
x_join <- c(x1,x2)
x_join
x[c(2,4)]
x<-c(3,11,8,15,12)
x[c(2,4)]
x[x>10]
x_join+1
x_join*2
log(x_join)
sum(x_join)
mean(x_join)
vv<-rnorm(1000)
vv[1:20]
class(vv)
length(vv)
summary(vv)
hist(vv)
seq(1,10, by=1)
seq(1,10, length.out=10)
seq(1,10, length.ou=10)
seq(1,10, length.ou=10)
seq(1,10, length.o=10)
seq(1,10, length.out=9)
rep(2,10)
rep(1:4, times=3)
rep(1:4, times=3)
rep(1:4, each=3)
y<-c(1,NA,3,0,NA)
mean(y)
mean(y, na.rm=T)
is.na(y)
is.na(y)
a=1
b=2
a=3
c=a+b
c
a=1
b=2
#a=3
c=a+b
c
M<-matrix(1:12, nrows=3, ncol=4, byrow=T)
M<-matrix(1:12, nrow=3, ncol=4, byrow=T)
M
M[2,3]
M[2,]
M[,3]
M[,3]
apply(M,2,mean)
apply(M, 1,mean)
dim(M)
t(M)
sum(M)
as.vector(M)
#let's do dataframe
type<-c(rep("drug",2),"placebo",rep("drug",2),rep("placebo",3))
score<-c(8,10,5,9,9,7,6,6)
clinic<-data.frame(type,score)
clinic
mean(score[type=="drug"])
mean(score[type=="placebo"])
clinic[,2]
clinic[,"score"]
clinic[type=="drug",]
clinic["drug",]
clinic[,"drug"]
clinic["drug",]
clinic[type=="drug",]
clinic[type=="drug"]
clinic[type=="drug",]
clinic[,2]
#problem 1
library(readxl)
reustarant <- read_excel(/Users/kirillnartov/Desktop/MSDA 623/Lecture 3/HW 2/Restaurant Data copy.xlsx)
reustarant <- read_excel("/Users/kirillnartov/Desktop/MSDA 623/Lecture 3/HW 2/Restaurant Data copy.xlsx")
reustarant
restaurant <- read_excel("/Users/kirillnartov/Desktop/MSDA 623/Lecture 3/HW 2/Restaurant Data copy.xlsx")
restaurant
data(restaurant)
str(restaurant)
summary(restaurant)
class(restaurant)
#Fisrt of all, we get rid of 1st column - it doesnt help predict Quality Rating
library(class)
restaurant <- restaurant[,-1] ## gets rid of the column 1
restaurant <- as.data.frame(restaurant) ##changes to dataframe, because we work with excel
class(restaurant)
#At the point we perform KNN
restaurant_train = restaurant[(1:150),]
restaurant_test = restaurant[-(1:150),]
knn_restaurant <- knn(train = restaurant_train[,-2], test = restaurant_test[,-2], cl = restaurant_train[,2], k = 5)
restaurant
restaurant <- restaurant[,-1] ## gets rid of the column 1
restaurant
restaurant <- read_excel("/Users/kirillnartov/Desktop/MSDA 623/Lecture 3/HW 2/Restaurant Data copy.xlsx")
restaurant
summary(restaurant) #avg price == 25.9, avg wati time == 13.92
#Fisrt of all, we get rid of 1st column - it doesnt help predict Quality Rating
library(class)
restaurant <- restaurant[,-1] ## gets rid of the column 1
restaurant
restaurant <- as.data.frame(restaurant) ##changes to dataframe, because we work with excel
class(restaurant)
#At the point we perform KNN
restaurant_train = restaurant[(1:150),]
restaurant_test = restaurant[-(1:150),]
knn_restaurant <- knn(train = restaurant_train[,-1], test = restaurant_test[,-1], cl = restaurant_train[,1], k = 5)
table(restaurant_test[,1], knn_trucking, dnn = c("Truth", "Prediction"))
table(restaurant_test[,1], knn_restaurant, dnn = c("Truth", "Prediction"))
sum(restaurant_test[,1] != knn_restaurant)
#11 missclasified vs ~130 classified cases means the model is reliable (<10% of fails)
knn_restaurant
#problem 3 a - mean of each variable in each cluster
library(fpc)
fit <- kmeans(restaurant, 4)
fit <- kmeans(restaurant, 3)
#problem 3 a - mean of each variable in each cluster
library(fpc)
fit <- kmeans(restaurant, 3)
fit <- kmeans(restaurant[,(2:3)], 3)
fit
#problem 3 b
fit$cluster[100]
#problem 4 a
hc_result <- hclust(dist(restaurant[,(2:3)]))
plot(hc_result)
#problem 4 b
rect.hclust(hc_result, k = 5)
#problem 5 - if there are any missing values
sum(is.na(restaurant))
#problem 6
aggregate(.~Quality Rating, restaurant, mean)
########################## Explore the iris data set with R#################
data(iris)
iris
################ Summary by groups####################
# group mean
aggregate(.~Species, iris, mean)
# group standard deviation
aggregate(.~Species, iris, sd)
#problem 6
aggregate(.~Quality Rating, restaurant)
#problem 6
#aggregate(.~Quality Rating, restaurant)
table(restaurant$Quality Rating)
#problem 6
#aggregate(.~Quality Rating, restaurant)
#table(restaurant$Quality Rating)
restaurant
#problem 6
aggregate(.~Quality Rating, restaurant, sum)
#problem 6
aggregate(x = Quality Rating, by = restaurant, FUN = 'sum')
#problem 6
aggregate(x = 'Quality Rating', by = restaurant, FUN = 'sum')
#problem 6
aggregate(.~Quality Rating, restaurant, sd)
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
aggregate(restaurant, Quality Rating, sd)
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
aggregate(restaurant$`Quality Rating`, data = restaurant, sd)
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
aggregate(restaurant$`Quality Rating`, data = restaurant, FUN = 'sd')
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
aggregate(restaurant$`Quality Rating`, by = restaurant, FUN = 'sd')
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
aggregate(restaurant$`Quality Rating`, by = restaurant, FUN = 'sum')
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
aggregate(restaurant$`Quality Rating`, by = restaurant, FUN = 'mean')
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$Quality Rating, list(restaurant$Meal Price ($), FUN = 'mean')
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`, FUN = 'mean')
#problem 6
#aggregate(.~Quality Rating, restaurant, sd)
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`, FUN = 'mean')
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`, FUN = 'mean')
restaurant <- read_excel("/Users/kirillnartov/Desktop/MSDA 623/Lecture 3/HW 2/Restaurant Data copy.xlsx")
restaurant
restaurant <- restaurant[,-1] ## gets rid of the column 1
restaurant
restaurant <- read_excel("/Users/kirillnartov/Desktop/MSDA 623/Lecture 3/HW 2/Restaurant Data copy.xlsx")
restaurant
aggregate(restaurant$`Quality Rating`, list(restaurant$Restaurant, FUN = 'sum')
aggregate(restaurant$`Quality Rating`, restaurant$Restaurant, FUN = 'sum')
aggregate(restaurant$`Quality Rating`, restaurant$Restaurant, FUN = 'sum')
aggregate(restaurant$`Quality Rating`, list(restaurant$Restaurant), FUN = 'sum')
#problem 6
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$Restaurant), FUN = sum)
#problem 6
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`), FUN = sum)
#problem 6
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`), FUN = sum)
#problem 6
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`), FUN = min)
#problem 6
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`), FUN = max)
#problem 7
SeventhSet <- cut(restaurant$`Meal Price ($)`, breaks = quantile(restaurant$`Meal Price ($)`), include.lowes=T)
SeventhSet
#problem 7
SeventhSet <- cut(restaurant$`Meal Price ($)`, breaks = quantile(restaurant$`Meal Price ($)`), include.lowes=T)
restaurantl<- restaurant
restaurantl$`Meal Price ($)` <- SeventhSet
table(restaurantl$`Meal Price ($)`)
table(restaurantl$`Meal Price ($)`, restaurantl$`Quality Rating`)
#problem 6 ?
# question: how to solve this problem?
#aggregate(dataframe$aggregate_column, list(dataframe$group_column), FUN)
#aggregate(restaurant$`Quality Rating`, list(restaurant$`Meal Price ($)`), FUN = max)
table(restaurant$`Quality Rating`)
pnorm(9, 3, 1)
pnorm(1.5, 3, 1)
pt(1.5,25)
qt(0.99,20,)
qt(0.99,9,)
qt(0.99,9,)
pnorm(1.5, 3, 1)
pt(1.5,25)
qt(0.99,20,)
qt(0.99,9,)
1-pt(
2.45,20
)
1-pt(2.45,20)
#or
pt(2.45,20,lower.tail=FALSE)
qnorm(0.01)*10+50
qnorm(0.90)
rnorm(100, 20, 4)
range(rnorm(100, 20, 4))
dat <- rnorm(1000, 20, 4)
sample(dat, 5)
xbar <- rep(0, 1000)
#let's create empty array
xbar <- rep(0, 1000)
#let's create many samples and take their means
for (i in 1:1000){
dat <- rnorm(1000, 20, 4)
xbar[i] = mean(sample(dat, 5))
}
xbar
hist(xbar)
#let's create empty array and random normal distribution
xbar <- rep(0, 1000)
dat <- rnorm(1000, 20, 4)
#let's create many samples and take their means
for (i in 1:1000){
xbar[i] = mean(sample(dat, 5))
}
hist(xbar)
#let's create empty array and random normal distribution
xbar <- rep(0, 1000)
dat <- rnorm(1000, 20, 4)
#let's create many samples and take their means
for (i in 1:1000){
xbar[i] = mean(sample(dat, 5))
}
hist(xbar)
#let's create empty array and random normal distribution
xbar <- rep(0, 1000)
dat <- rnorm(1000, 20, 4)
#let's create many samples and take their means
for (i in 1:1000){
xbar[i] = mean(sample(dat, 5))
}
hist(xbar)
#example for CLT
#let's create empty array and random normal distribution
xbar <- rep(0, 1000)
dat <- rnorm(1000, 20, 4)
#let's create many samples and take their means
for (i in 1:1000){
xbar[i] = sd(sample(dat, 5))
}
hist(xbar)
#example for CLT
#let's create empty array and random normal distribution
xbar <- rep(0, 1000)
dat <- rnorm(1000, 20, 4)
#let's create many samples and take their means
for (i in 1:1000){
xbar[i] = sd(sample(dat, 5))
}
hist(xbar)
#example for CLT
#let's create empty array and random normal distribution
xbar <- rep(0, 1000)
dat <- rnorm(1000, 20, 4)
#let's create many samples and take their means
for (i in 1:1000){
xbar[i] = mean(sample(dat, 5))
}
hist(xbar)
hist(xbar, col='grey')
hist(xbar, col='grey', prob = TRUE)
hist(xbar, col='grey', prob = FALSE)
hist(xbar, col='grey', prob = TRUE)
hist(xbar, col='grey', prob = FALSE)
hist(xbar, col='grey', prob = TRUE)
hist(xbar, col='grey', prob = TRUE)
curve(dnorm(xbar, mean=20, sd=4), 0, 70, add=TRUE, lwd=2, col='red')
hist(xbar, col='grey', prob = TRUE)
qnorm(0.005)
qnorm(0.005, lower.tail=F)
qnorm(0.005, lower.tail=T)
qnorm(0.005, lower.tail=F)
qt(0.005, df=51-1)
qt(0.005, df=50)
qt(0.05, df=50)
qt(0.05, df=50, lower.tail=F)
qt(0.05, df=50, lower.tail=T)
pt(-1.115, df=50, lower.tail=T)
qt(0.05, df=37, lower.tail = F)
qt(0.95, df=37, lower.tail = T)
pt(1.687094, df=37, lower.tail = T)
pt(1.687094, df=37, lower.tail = F)
pt(1.687094, df=37, lower.tail = T)
(7.2-5)/(6.2/sqrt(38))
pt(2.18, df=37, lower.tail = T)
1-pt(2.18, df=37, lower.tail = T)
pt(2.18, df=37, lower.tail = F)
